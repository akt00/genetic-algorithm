import copy
from typing import Optional

from .urdf import URDFLink
from .type import *


def get_random_gene(length: int = 17) -> GeneSeed:
    """
    :param length: the size of the gene. 17 for this project
    :return: a genome with the size of (length,) and values with [0, 1)
    """
    return np.random.rand(length)


def get_random_genome(gene_length: int = 17, gene_count: int = 3) -> DNA:
    """
    :param gene_length: the size of the gene. 17 for this project
    :param gene_count: a number of GeneSeeds.
    :return: a DNA, a list of GeneSeed
    """
    return [get_random_gene(length=gene_length) for _ in range(gene_count)]


def get_gene_spec(gene_spec: Optional[GeneSpec] = None) -> GeneSpec:
    """
    :param gene_spec: The encoding scheme for each gene field. Either None (default) or a custom encoding scheme
    :return: add an index to each gene field and returns it
    """
    if gene_spec is None:
        gene_spec = copy.deepcopy(DEFAULT_GENE_SPEC)
    for index, key in enumerate(gene_spec.keys()):
        gene_spec[key]['index'] = index
    return gene_spec


def get_gene_dict(gene: GeneSeed, spec: GeneSpec) -> Gene:
    """
    :param gene: a GeneSeed generated by get_random_gene()
    :param spec: an indexed GeneSpec generated by get_gene_spec()
    :return: Gene, a dictionary for gene fields and the rescaled gene field values
    """
    return {key: gene[spec[key]['index']] * spec[key]['scale'] for key in spec.keys()}


def get_genome_dicts(genome: DNA, spec: GeneSpec) -> Genome:
    """
    :param genome: a DNA object
    :param spec: a GeneSpec generated by get_gene_spec()
    :return: a list of Genes
    """
    return [get_gene_dict(gs, spec) for gs in genome]


def expand_link(parent_link: URDFLink, uniq_parent_name: Optional[str],
                flat_links: list[URDFLink], exp_links: list[URDFLink]) -> None:
    """
    expand the URDF links based on the "recur" parameter
    :param parent_link:
    :param uniq_parent_name:
    :param flat_links:
    :param exp_links:
    :return:
    """
    children = [link for link in flat_links if link.parent_name == parent_link.name]
    sibling_index = 1
    for c in children:
        for _ in range(int(c.recur)):
            sibling_index += 1
            c_copy = copy.deepcopy(c)
            c_copy.parent_name = uniq_parent_name
            c_copy.name = c_copy.name + str(len(exp_links))
            c_copy.sibling_index = sibling_index
            exp_links.append(c_copy)
            expand_link(parent_link=c, uniq_parent_name=c_copy.name,
                        flat_links=flat_links, exp_links=exp_links)


def genome_to_links(g_dicts: Genome) -> list[URDFLink]:
    """
    :param g_dicts:
    :return:
    """
    links = []
    link_index = 0
    parent_names = [str(link_index)]
    for gdict in g_dicts:
        link_name = str(link_index)
        parent_index = gdict['joint-parent'] * len(parent_names)
        assert parent_index < len(parent_names)
        parent_name = parent_names[int(parent_index)]
        recur = int(gdict['link-recurrence'])
        link = URDFLink(name=link_name,
                        parent_name=parent_name,
                        recur=recur + 1,
                        link_length=gdict["link-length"],
                        link_radius=gdict["link-radius"],
                        link_mass=gdict["link-mass"],
                        joint_type=gdict["joint-type"],
                        joint_parent=gdict["joint-parent"],
                        joint_axis_xyz=gdict["joint-axis-xyz"],
                        joint_origin_rpy_1=gdict["joint-origin-rpy-1"],
                        joint_origin_rpy_2=gdict["joint-origin-rpy-2"],
                        joint_origin_rpy_3=gdict["joint-origin-rpy-3"],
                        joint_origin_xyz_1=gdict["joint-origin-xyz-1"],
                        joint_origin_xyz_2=gdict["joint-origin-xyz-2"],
                        joint_origin_xyz_3=gdict["joint-origin-xyz-3"],
                        control_waveform=gdict["control-waveform"],
                        control_amp=gdict["control-amp"],
                        control_freq=gdict["control-freq"])
        links.append(link)
        if link_index != 0:
            parent_names.append(link_name)
        link_index += 1
        links[0].parent_name = 'None'
    return links


def crossover(g1: DNA, g2: DNA) -> DNA:
    """
    :param g1:
    :param g2:
    :return:
    """
    ceil = len(g1) if len(g1) < len(g2) else len(g2)
    x = np.random.randint(low=0, high=ceil)
    g1 = np.array(g1)
    g2 = np.array(g2)
    g3 = np.concatenate((g1[:x], g2[x:]))
    return [gene for gene in g3]


def point_mutate(genome: DNA, rate: float, amount: float) -> DNA:
    """
    :param genome:
    :param rate:
    :param amount:
    :return:
    """
    new_genome = copy.deepcopy(genome)
    for gene in new_genome:
        for i in range(len(gene)):
            if tmp := np.random.rand() < rate:
                if int(tmp * 10) % 2 == 0:
                    gene[i] += amount
                else:
                    gene[i] -= amount

                if gene[i] < 0:
                    gene[i] = 0
                elif gene[i] > 1:
                    gene[i] = 0.9999
    return new_genome


def shrink_mutate(genome: DNA, rate: float) -> DNA:
    """
    :param genome:
    :param rate:
    :return:
    """
    if len(genome) > 1 and np.random.rand() < rate:
        index = np.random.randint(low=0, high=len(genome) - 1)
        new_genome = np.delete(arr=genome, obj=index, axis=0)
        return [gene for gene in new_genome]
    else:
        return copy.deepcopy(genome)


def grow_mutate(genome: DNA, rate: float) -> DNA:
    """
    :param genome:
    :param rate:
    :return:
    """
    new_genome = copy.copy(genome)
    if np.random.rand() < rate:
        gene = get_random_gene(len(genome[0]))
        new_genome = copy.deepcopy(genome)
        new_genome = np.append(arr=new_genome, values=[gene], axis=0)
    return [gene for gene in new_genome]


def to_csv(dna: DNA, filepath: str) -> None:
    """
    :param dna:
    :param filepath:
    :return:
    """
    with open(filepath, 'w') as f:
        for gene in dna:
            gene = [str(val) for val in gene]
            gene = ','.join(gene) + '\n'
            f.write(gene)


def from_csv(filepath: str) -> DNA:
    """
    :param filepath:
    :return:
    """
    dna = []
    with open(filepath, 'r') as f:
        while gene := f.readline():
            gene = gene.replace('\n', '')
            gene = gene.split(',')
            gene = [float(g) for g in gene]
            dna.append(np.array(gene))
    return dna
